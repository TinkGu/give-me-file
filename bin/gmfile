#!/usr/bin/env node

const download = require('download-git-repo')
const program = require('commander')
const exists = require('fs').existsSync
const path = require('path')
const ora = require('ora')
const home = require('user-home')
const tildify = require('tildify')
const chalk = require('chalk')
const inquirer = require('inquirer')
const rm = require('rimraf').sync
const logger = require('../lib/logger')
const generate = require('../lib/generate')
const checkVersion = require('../lib/check-version')
const localPath = require('../lib/local-path')
const installPkg = require('../lib/install-pkg')

const isLocalPath = localPath.isLocalPath
const getTemplatePath = localPath.getTemplatePath

const tmprcDir = '.gmfile-templates'

/**
 * Usage.
 */

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template')
  .option('--install', 'run npm install for repo')
  .option('--clean-tmp', 'clean the tmp dir')
  .option('-d, --dir <dirname>', 'run gmfile with a specified directory at the repo')
  .parse(process.argv)

/**
 * Help.
 */

program.on('--help', () => {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create some files or even a project straight from a github template'))
  console.log('    $ gmfile username/repo dest_path')
  console.log()
})

/**
 * Help and Clean
 */

function defaultr () {
  program.parse(process.argv)
  if (program.args.length < 1) {
    if (program['clean-tmp']) {
      rm(path.join(home, tmprcDir))
      process.exit()
    }
    return program.help()
  }
}
defaultr()

/**
 * Settings.
 */

let template = program.args[0]
const rawName = program.args[1]
const inPlace = !rawName || rawName === '.'
const name = inPlace ? path.relative('../', process.cwd()) : rawName
const to = path.resolve(rawName || '.')
const clone = program.clone || false

const tmp = path.join(home, tmprcDir, template.replace(/\//g, '-'))
if (program.offline) {
  console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}

/**
 * Padding.
 */

console.log()
process.on('exit', () => {
  console.log()
})

if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Generate files in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }]).then(answers => {
    if (answers.ok) {
      run()
    }
  }).catch(logger.fatal)
} else {
  run()
}

/**
 * Check, download and generate the project.
 */

function run () {
  // check if template is local
  if (isLocalPath(template)) {
    const templatePath = getTemplatePath(template)
    const finalTmp = getPathWithDir(templatePath)
    safeGenerate(finalTmp, finalTmp)
  } else {
    checkVersion(() => {
      downloadAndGenerate(template)
    })
  }
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template) {
  const spinner = ora('downloading template')
  spinner.start()
  // Remove if local template exists
  if (exists(tmp)) rm(tmp)
  download(template, tmp, { clone }, err => {
    spinner.stop()
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())

    const finalTmp = getPathWithDir(tmp)
    if (program.install) installPkg(finalTmp)
    safeGenerate(finalTmp, getPathWithDir(template))
  })
}

function getPathWithDir (_template) {
  return typeof program.dir === 'string'
    ? path.join(_template, program.dir)
    : _template
}

function safeGenerate (src, temlateName) {
  if (exists(src)) {
    generate(name, src, to, err => {
      if (err) logger.fatal(err)
      console.log()
      logger.success('Generated "%s".', name)
    })
  } else {
    logger.fatal('template "%s" not found.', temlateName)
  }
}
